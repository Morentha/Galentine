package org.example.bot;

import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.User;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageReplyMarkup;


import java.io.File;
import java.sql.*;
import java.util.*;
import java.util.stream.Collectors;

public class MadBot extends TelegramLongPollingBot {

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    private static final String DB_URL = "jdbc:sqlite:bot.db";
    private static final Long ADMIN_ID = 257023213L;
    private static final Integer MAX_USERS = 40;
    private static final String WELCOME_IMAGE_PATH = "src/main/resources/images/welcome.png";
    private static final String QUESTIONS_PATH = "src/main/resources/questions";

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
    private enum BotState {
        IDLE,           // –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        AWAITING_VOTES, // –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤
        VOTING_COMPLETED // –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
    }

    // –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
    private BotState currentState = BotState.IDLE;
    private int currentQuestionIndex = -1; // –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    private List<String> questionImages = new ArrayList<>(); // –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –≤–æ–ø—Ä–æ—Å–æ–≤
    private Map<Long, Integer> currentQuestionResponses = new HashMap<>(); // –û—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    private Map<Integer, Map<Long, Integer>> allResponses = new HashMap<>(); // –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º
    private Integer adminMessageId = null; // ID —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–æ—Ç–∞ - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ë–î –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã
     */
    public MadBot() {
        initDatabase();
        loadQuestionImages();
    }

    @Override
    public String getBotUsername() {
        return "Galentine bot";
    }

    @Override
    public String getBotToken() {
        return "8332201148:AAHQ5jvjWWrqcgP_kF1DFrVYyYt6nEwB11k";
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    @Override
    public void onUpdateReceived(Update update) {
        try {
            if (update.hasMessage() && update.getMessage().hasText()) {
                handleMessage(update);
            } else if (update.hasCallbackQuery()) {
                handleCallbackQuery(update);
            }
        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ update: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    private void handleMessage(Update update) {
        String text = update.getMessage().getText().trim();
        Long chatId = update.getMessage().getChatId();
        User user = update.getMessage().getFrom();

        // –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞
        if (chatId.equals(ADMIN_ID)) {
            handleAdminCommands(text, chatId);
            return;
        }

        // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if (text.equals("/start")) {
            sendWelcome(chatId);
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞
        if (text.matches("\\d+")) {
            handleNumberInput(text, chatId, user);
        } else {
            sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ü–∏—Ñ—Ä–∞–º–∏ –æ—Ç 1 –¥–æ " + MAX_USERS);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     */
    private void handleAdminCommands(String text, Long chatId) {
        switch (text) {
            case "/list":
                sendMessage(chatId, listUsers());
                break;
            case "/start_voting":
                startVoting(chatId);
                break;
            case "/next_question":
                sendNextQuestion(chatId);
                break;
            case "/show_results":
                showResults(chatId);
                break;
            case "/nuke":
                nukeDatabase();
                clearAllData();
                sendMessage(chatId, "üí• –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω—ã!");
                break;
            case "/admin_menu":
                showAdminMenu(chatId);
                break;
            case "/clear_users":
                clearAllUsers();
                sendMessage(chatId, "‚úÖ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏—Ü –æ—á–∏—â–µ–Ω.");
                break;
            case "/status":
                sendMessage(chatId, makeStatusText());
                break;
            default:
                if (text.startsWith("/update")) {
                    handleUpdateCommand(text, chatId);
                } else if (text.startsWith("/delete")) {
                    handleDeleteCommand(text, chatId);
                } else {
                    sendMessage(chatId, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin_menu –¥–ª—è –º–µ–Ω—é");
                }
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /update
     */
    private void handleUpdateCommand(String text, Long chatId) {
        String[] parts = text.split("\\s+");
        if (parts.length == 3) {
            try {
                Long oldNumber = Long.parseLong(parts[1]);
                Long newNumber = Long.parseLong(parts[2]);
                updateUser(oldNumber, newNumber);
                sendMessage(chatId, "‚úÖ –ù–æ–º–µ—Ä —É " + oldNumber + " –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ " + newNumber);
            } catch (NumberFormatException e) {
                sendMessage(chatId, "‚ùå –§–æ—Ä–º–∞—Ç: /update <—Å—Ç–∞—Ä—ã–π_–Ω–æ–º–µ—Ä> <–Ω–æ–≤—ã–π_–Ω–æ–º–µ—Ä>");
            }
        } else {
            sendMessage(chatId, "‚ùå –§–æ—Ä–º–∞—Ç: /update <—Å—Ç–∞—Ä—ã–π_–Ω–æ–º–µ—Ä> <–Ω–æ–≤—ã–π_–Ω–æ–º–µ—Ä>");
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /delete
     */
    private void handleDeleteCommand(String text, Long chatId) {
        String[] parts = text.split("\\s+");
        if (parts.length == 2) {
            try {
                Long chatIdToDelete = Long.parseLong(parts[1]);
                deleteUser(chatIdToDelete);
                sendMessage(chatId, "üóë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + chatIdToDelete + " —É–¥–∞–ª—ë–Ω.");
            } catch (NumberFormatException e) {
                sendMessage(chatId, "‚ùå –§–æ—Ä–º–∞—Ç: /delete <chat_id>");
            }
        } else {
            sendMessage(chatId, "‚ùå –§–æ—Ä–º–∞—Ç: /delete <chat_id>");
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline-–∫–Ω–æ–ø–æ–∫
     */
    private void handleCallbackQuery(Update update) {
        String callbackData = update.getCallbackQuery().getData();
        Long chatId = update.getCallbackQuery().getMessage().getChatId();
        Integer messageId = update.getCallbackQuery().getMessage().getMessageId();

        try {
            if (callbackData.startsWith("vote_")) {
                handleVote(callbackData, chatId, messageId);
            } else {
                switch (callbackData) {
                    case "admin_menu":
                        showAdminMenu(chatId);
                        break;
                    case "ask_question":
                        sendNextQuestion(chatId);
                        break;
                    case "list_users":
                        sendMessage(chatId, listUsersWithVotes());
                        break;
                    case "clear_users":
                        clearAllUsers();
                        sendMessage(chatId, "‚úÖ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏—Ü –æ—á–∏—â–µ–Ω.");
                        showAdminMenu(chatId);
                        break;
                    case "show_results":
                        showResults(chatId);
                        break;
                }
            }
        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: " + e.getMessage());
            sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
     */
    private void handleVote(String callbackData, Long chatId, Integer messageId) {
        int votedNumber = Integer.parseInt(callbackData.substring(5));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≥–æ–ª–æ—Å—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞ —Å–µ–±—è
        Long userNumber = getUserNumberFromDB(chatId);
        if (userNumber != null && userNumber == votedNumber) {
            sendMessage(chatId, "‚ùå –ù–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä!");
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        if (hasUserVoted(chatId, currentQuestionIndex)) {
            sendMessage(chatId, "‚ö†Ô∏è –í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å!");
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å –≤ –ë–î
        saveVote(chatId, currentQuestionIndex, votedNumber);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –æ—Ç–≤–µ—Ç–æ–≤
        currentQuestionResponses.put(chatId, votedNumber);

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫—É
        sendMessage(chatId, "‚úÖ –í–∞—à –≥–æ–ª–æ—Å –∑–∞ –Ω–æ–º–µ—Ä " + votedNumber + " –ø—Ä–∏–Ω—è—Ç!");
        sendMessage(chatId, "üó≥ –í–∞—à –≥–æ–ª–æ—Å –æ—á–µ–Ω—å –≤–∞–∂–µ–Ω –¥–ª—è –Ω–∞—Å! –û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –Ω–∞ –ª–∏–Ω–∏–∏, –æ–∂–∏–¥–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏—Ü...");

        // –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        removeInlineKeyboard(chatId, messageId);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É –∞–¥–º–∏–Ω–∞
        updateAdminStatus();

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º –≥–æ–ª–æ—Å–µ
        if (!chatId.equals(ADMIN_ID)) {
            String userLink = getUserLink(chatId);
            sendMessage(ADMIN_ID, "‚úÖ " + userLink + " –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª(–∞) –∑–∞ –Ω–æ–º–µ—Ä " + votedNumber);
        }
    }

    private boolean hasUserVoted(Long chatId, int questionIndex) {
        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement ps = conn.prepareStatement(
                     "SELECT 1 FROM votes WHERE chat_id=? AND question_index=?")) {
            ps.setLong(1, chatId);
            ps.setInt(2, questionIndex);
            ResultSet rs = ps.executeQuery();
            return rs.next();
        } catch (SQLException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ–ª–æ—Å–∞: " + e.getMessage());
        }
        return false;
    }

    private void saveVote(Long chatId, int questionIndex, int votedNumber) {
        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement ps = conn.prepareStatement(
                     "INSERT OR REPLACE INTO votes(chat_id, question_index, voted_number) VALUES (?, ?, ?)")) {
            ps.setLong(1, chatId);
            ps.setInt(2, questionIndex);
            ps.setInt(3, votedNumber);
            ps.executeUpdate();
        } catch (SQLException e) {
            System.err.println("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ–ª–æ—Å–∞: " + e.getMessage());
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
     */
    private void handleNumberInput(String text, Long chatId, User user) {
        try {
            Long number = Long.parseLong(text);

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞
            if (number < 1 || number > MAX_USERS) {
                sendMessage(chatId, "‚ö†Ô∏è –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ " + MAX_USERS + ".");
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (userExists(chatId)) {
                String existingNumber = getUserNumber(chatId);
                sendMessage(chatId, "‚ùå –í–∞—à –Ω–æ–º–µ—Ä —É–∂–µ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω: " + existingNumber +
                        "\n–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∫–æ–π.");
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞
            if (isNumberTaken(number)) {
                sendMessage(chatId, "‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –∑–∞–Ω—è—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.");
                return;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            saveUser(chatId, number, user);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫—É
            String welcomeMessage = "‚ú® *–¢–≤–æ–π –Ω–æ–º–µ—Ä: " + number + "*\n\n" +
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –¢–≤–æ–π –Ω–æ–º–µ—Ä –∑–∞–∫—Ä–µ–ø–ª—ë–Ω –∑–∞ —Ç–æ–±–æ–π.\n\n" +
                    "‚è≥ –û–∂–∏–¥–∞–π –Ω–∞—á–∞–ª–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è! –¢–≤–æ–π –∑–≤–æ–Ω–æ–∫ –æ—á–µ–Ω—å –≤–∞–∂–µ–Ω –¥–ª—è –Ω–∞—Å üí´\n" +
                    "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π, –∫–æ–≥–¥–∞ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏—Ü—ã –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã.";

            sendMessage(chatId, welcomeMessage);

            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            String userLink = getUserLink(user);
            String adminNotification = "üë§ –ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!\n" +
                    userLink + " - –Ω–æ–º–µ—Ä " + number +
                    "\n\n–í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: " + getRegisteredCount() + "/" + MAX_USERS;
            sendMessage(ADMIN_ID, adminNotification);

        } catch (NumberFormatException e) {
            sendMessage(chatId, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.");
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private String getUserLink(User user) {
        if (user.getUserName() != null && !user.getUserName().isEmpty()) {
            return "<a href=\"tg://user?id=" + user.getId() + "\">@" + user.getUserName() + "</a>";
        } else {
            String firstName = user.getFirstName() != null ? user.getFirstName() : "";
            String lastName = user.getLastName() != null ? user.getLastName() : "";
            String fullName = (firstName + " " + lastName).trim();

            if (!fullName.isEmpty()) {
                return "<a href=\"tg://user?id=" + user.getId() + "\">" + fullName + "</a>";
            } else {
                return "<a href=\"tg://user?id=" + user.getId() + "\">–£—á–∞—Å—Ç–Ω–∏–∫ " + user.getId() + "</a>";
            }
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ chatId
     */
    private String getUserLink(Long chatId) {
        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement ps = conn.prepareStatement("SELECT username, first_name, last_name FROM users WHERE chat_id=?")) {
            ps.setLong(1, chatId);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                String username = rs.getString("username");
                String firstName = rs.getString("first_name");
                String lastName = rs.getString("last_name");

                if (username != null && !username.isEmpty()) {
                    return "<a href=\"tg://user?id=" + chatId + "\">@" + username + "</a>";
                } else {
                    String fullName = (firstName + " " + (lastName != null ? lastName : "")).trim();
                    if (!fullName.isEmpty()) {
                        return "<a href=\"tg://user?id=" + chatId + "\">" + fullName + "</a>";
                    }
                }
            }
        } catch (SQLException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + e.getMessage());
        }
        return "<a href=\"tg://user?id=" + chatId + "\">–£—á–∞—Å—Ç–Ω–∏–∫ " + chatId + "</a>";
    }

    /**
     * –ù–∞—á–∞–ª–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
     */
    private void startVoting(Long chatId) {
        if (currentState != BotState.IDLE) {
            sendMessage(chatId, "‚ùå –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —É–∂–µ –Ω–∞—á–∞—Ç–æ!");
            return;
        }

        if (getRegisteredCount() < 2) {
            sendMessage(chatId, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è (–º–∏–Ω–∏–º—É–º 2)");
            return;
        }

        currentState = BotState.AWAITING_VOTES;
        currentQuestionIndex = 0;
        currentQuestionResponses.clear();
        allResponses.clear();

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        List<Long> allUsers = getAllUsers();
        String votingStartMessage = "üéâ *–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!*\n\n" +
                "–°–µ–π—á–∞—Å –≤–∞–º –ø—Ä–∏–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã –æ–¥–∏–Ω –∑–∞ –¥—Ä—É–≥–∏–º.\n" +
                "–í—ã–±–∏—Ä–∞–π—Ç–µ –Ω–æ–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –Ω—Ä–∞–≤–∏—Ç—Å—è!\n\n" +
                "üí´ –£–¥–∞—á–∏ –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏!";

        for (Long userId : allUsers) {
            sendMessage(userId, votingStartMessage);
        }

        sendMessage(chatId, "üó≥ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã " + allUsers.size() + " —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.");
        sendNextQuestion(chatId);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
     */
    private void sendNextQuestion(Long chatId) {
        if (currentQuestionIndex >= questionImages.size()) {
            sendMessage(chatId, "‚úÖ –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!");
            return;
        }

        String imagePath = questionImages.get(currentQuestionIndex);
        File imageFile = new File(imagePath);

        if (!imageFile.exists()) {
            sendMessage(chatId, "‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: " + imagePath);
            currentQuestionIndex++;
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã
        if (currentQuestionIndex > 0) {
            allResponses.put(currentQuestionIndex - 1, new HashMap<>(currentQuestionResponses));
        }

        // –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        currentQuestionResponses.clear();

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        List<Long> allUsers = getAllUsers();
        int sentCount = 0;

        for (Long userId : allUsers) {
            try {
                SendPhoto photo = new SendPhoto();
                photo.setChatId(userId.toString());
                photo.setPhoto(new InputFile(imageFile));
                photo.setCaption("‚ùì –í–æ–ø—Ä–æ—Å " + (currentQuestionIndex + 1) + "\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä:");

                // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–µ–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
                photo.setReplyMarkup(createVotingKeyboard(userId));

                execute(photo);
                sentCount++;

                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
                Thread.sleep(100);
            } catch (Exception e) {
                System.err.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é " + userId + ": " + e.getMessage());
            }
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω—É
        try {
            SendPhoto adminPhoto = new SendPhoto();
            adminPhoto.setChatId(ADMIN_ID.toString());
            adminPhoto.setPhoto(new InputFile(imageFile));
            adminPhoto.setCaption("üì® –í–æ–ø—Ä–æ—Å " + (currentQuestionIndex + 1) + " –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω " + sentCount + " —É—á–∞—Å—Ç–Ω–∏–∫–∞–º");
            execute(adminPhoto);
        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –∞–¥–º–∏–Ω—É: " + e.getMessage());
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∞
        updateAdminStatus();

        currentQuestionIndex++;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è (–∏—Å–∫–ª—é—á–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä)
     */
    private InlineKeyboardMarkup createVotingKeyboard(Long userId) {
        List<Long> registeredNumbers = getRegisteredNumbers();
        Long userNumber = getUserNumberFromDB(userId); // –ª—É—á—à–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å Long

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        List<InlineKeyboardButton> currentRow = new ArrayList<>();

        for (Long number : registeredNumbers) {
            if (userNumber != null && number.equals(userNumber)) {
                continue; // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–≤–æ–π –Ω–æ–º–µ—Ä
            }

            InlineKeyboardButton button = new InlineKeyboardButton();
            button.setText("‚Ññ" + number);
            button.setCallbackData("vote_" + number);

            currentRow.add(button);

            // –ø–æ—Å–ª–µ 4 –∫–Ω–æ–ø–æ–∫ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
            if (currentRow.size() == 4) {
                rows.add(currentRow);
                currentRow = new ArrayList<>();
            }
        }

        // –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏
        if (!currentRow.isEmpty()) {
            rows.add(currentRow);
        }

        markup.setKeyboard(rows);
        return markup;
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
     */
    private void showResults(Long chatId) {
        Map<Integer, Integer> voteCounts = new HashMap<>();

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–æ–ª–æ—Å–∞ –∏–∑ –ë–î
        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement ps = conn.prepareStatement(
                     "SELECT voted_number, COUNT(*) as cnt FROM votes WHERE question_index=? GROUP BY voted_number")) {
            ps.setInt(1, currentQuestionIndex);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                int votedNumber = rs.getInt("voted_number");
                int count = rs.getInt("cnt");
                voteCounts.put(votedNumber, count);
            }
        } catch (SQLException e) {
            System.err.println("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: " + e.getMessage());
        }

        if (voteCounts.isEmpty()) {
            sendMessage(chatId, "üìä –ü–æ–∫–∞ –Ω–µ—Ç –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.");
            return;
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        StringBuilder resultText = new StringBuilder("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:\n\n");

        voteCounts.entrySet().stream()
                .sorted(Map.Entry.<Integer, Integer>comparingByValue().reversed())
                .forEach(entry -> {
                    resultText.append("‚Ññ").append(entry.getKey())
                            .append(" ‚Äî ").append(entry.getValue()).append(" –≥–æ–ª–æ—Å(–æ–≤)\n");
                });

        sendMessage(chatId, resultText.toString());
    }


    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
     */
    private String makeStatusText() {
        int total = getRegisteredCount();
        int answered = currentQuestionResponses.size();

        StringBuilder text = new StringBuilder("üìä –°—Ç–∞—Ç—É—Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è (–≤–æ–ø—Ä–æ—Å " + currentQuestionIndex + "):\n\n");

        List<Long> allUsers = getAllUsers();
        for (Long userId : allUsers) {
            String userLink = getUserLink(userId);
            Long number = getUserNumberFromDB(userId);

            if (currentQuestionResponses.containsKey(userId)) {
                Integer vote = currentQuestionResponses.get(userId);
                text.append("‚úÖ ").append(userLink)
                        .append(" (‚Ññ").append(number).append(") ‚Üí –∑–∞ ‚Ññ").append(vote).append("\n");
            } else {
                text.append("‚ùå ").append(userLink)
                        .append(" (‚Ññ").append(number).append(") - –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∞\n");
            }
        }

        text.append("\nüó≥ –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏: ").append(answered).append("/").append(total);
        return text.toString();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É –∞–¥–º–∏–Ω–∞
     */
    private void updateAdminStatus() {
        String statusText = makeStatusText();

        try {
            if (adminMessageId == null) {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ id
                SendMessage message = new SendMessage();
                message.setChatId(ADMIN_ID.toString());
                message.setText(statusText);
                message.setReplyMarkup(createAdminKeyboard());
                message.setParseMode("HTML");
                message.setDisableWebPagePreview(true);

                Message sent = execute(message); // execute –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Message
                if (sent != null) {
                    adminMessageId = sent.getMessageId();
                }
            } else {
                // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (EditMessageText)
                EditMessageText edit = new EditMessageText();
                edit.setChatId(ADMIN_ID.toString());
                edit.setMessageId(adminMessageId); // id —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                edit.setText(statusText);
                edit.setReplyMarkup(createAdminKeyboard());
                edit.setParseMode("HTML");
                edit.setDisableWebPagePreview(true);

                execute(edit); // —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            }
        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∞: " + e.getMessage());
            e.printStackTrace();
            // –ø—Ä–∏ –æ—à–∏–±–∫–µ –º–æ–∂–Ω–æ –æ–±–Ω—É–ª–∏—Ç—å adminMessageId, —á—Ç–æ–±—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º –≤—ã–∑–æ–≤–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            // adminMessageId = null;
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     */
    private InlineKeyboardMarkup createAdminKeyboard() {
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        // –ö–Ω–æ–ø–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        List<InlineKeyboardButton> row1 = new ArrayList<>();
        InlineKeyboardButton nextQuestionBtn = new InlineKeyboardButton();
        nextQuestionBtn.setText("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å");
        nextQuestionBtn.setCallbackData("ask_question");
        row1.add(nextQuestionBtn);

        // –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        List<InlineKeyboardButton> row2 = new ArrayList<>();
        InlineKeyboardButton showResultsBtn = new InlineKeyboardButton();
        showResultsBtn.setText("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã");
        showResultsBtn.setCallbackData("show_results");
        row2.add(showResultsBtn);

        // –ö–Ω–æ–ø–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        List<InlineKeyboardButton> row3 = new ArrayList<>();
        InlineKeyboardButton listUsersBtn = new InlineKeyboardButton();
        listUsersBtn.setText("üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤");
        listUsersBtn.setCallbackData("list_users");
        row3.add(listUsersBtn);

        // –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏
        List<InlineKeyboardButton> row4 = new ArrayList<>();
        InlineKeyboardButton clearUsersBtn = new InlineKeyboardButton();
        clearUsersBtn.setText("üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ—Ö");
        clearUsersBtn.setCallbackData("clear_users");
        row4.add(clearUsersBtn);

        keyboard.add(row1);
        keyboard.add(row2);
        keyboard.add(row3);
        keyboard.add(row4);

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        markup.setKeyboard(keyboard);
        return markup;
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     */
    private void showAdminMenu(Long chatId) {
        String menuText = "<b>–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n" +
                "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: " + getRegisteredCount() + "/" + MAX_USERS + "\n" +
                "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: " + currentState + "\n" +
                "–ê–∫—Ç–∏–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å: " + (currentQuestionIndex >= 0 ? (currentQuestionIndex + 1) : "–Ω–µ—Ç");


        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(menuText);
        message.setReplyMarkup(createAdminKeyboard());

        try {
            execute(message);
        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞: " + e.getMessage());
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
     */
    private void removeInlineKeyboard(Long chatId, Integer messageId) {
        try {
            EditMessageReplyMarkup edit = new EditMessageReplyMarkup();
            edit.setChatId(chatId.toString());
            edit.setMessageId(messageId);
            edit.setReplyMarkup(null); // —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            execute(edit);
        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: " + e.getMessage());
            // fallback: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ—Ä–æ—Ç–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            sendMessage(chatId, "‚úÖ –ì–æ–ª–æ—Å –ø—Ä–∏–Ω—è—Ç!");
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    private void clearAllUsers() {
        nukeDatabase();
        currentQuestionResponses.clear();
        allResponses.clear();
        currentQuestionIndex = 0;
        currentState = BotState.IDLE;
        adminMessageId = null;
    }

    /**
     * –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    private void clearAllData() {
        clearAllUsers();
        questionImages.clear();
        loadQuestionImages();
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤–æ–ø—Ä–æ—Å–æ–≤
     */
    private void loadQuestionImages() {
        File questionsDir = new File(QUESTIONS_PATH);
        if (questionsDir.exists() && questionsDir.isDirectory()) {
            File[] files = questionsDir.listFiles((dir, name) ->
                    name.toLowerCase().endsWith(".jpg") ||
                            name.toLowerCase().endsWith(".jpeg") ||
                            name.toLowerCase().endsWith(".png") ||
                            name.toLowerCase().endsWith(".gif"));

            if (files != null) {
                for (File file : files) {
                    questionImages.add(file.getAbsolutePath());
                }
                // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏ –¥–ª—è –ø–æ—Ä—è–¥–∫–∞
                questionImages.sort(String::compareTo);
            }
        }

        // –ï—Å–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–∞
        if (questionImages.isEmpty()) {
            System.out.println("‚ö†Ô∏è –í –ø–∞–ø–∫–µ questions –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π");
        } else {
            System.out.println("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ " + questionImages.size() + " –≤–æ–ø—Ä–æ—Å–æ–≤");
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
     */
    private void sendWelcome(Long chatId) {
        File welcomeImage = new File(WELCOME_IMAGE_PATH);

        if (welcomeImage.exists()) {
            try {
                SendPhoto photo = new SendPhoto();
                photo.setChatId(chatId.toString());
                photo.setPhoto(new InputFile(welcomeImage));
                photo.setCaption("üéÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ Galentine!\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å –≤–∞—à–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏:");
                execute(photo);
            } catch (TelegramApiException e) {
                sendMessage(chatId, "üéÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ Galentine!\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å –≤–∞—à–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏:");
            }
        } else {
            sendMessage(chatId, "üéÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ Galentine!\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å –≤–∞—à–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏:");
        }
    }

    /**
     * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private void sendMessage(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);
        message.setParseMode("HTML");
        message.setDisableWebPagePreview(true);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è " + chatId + ": " + e.getMessage());
        }
    }

    // --- –ë–ê–ó–ê –î–ê–ù–ù–´–• ---

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    private void initDatabase() {
        try (Connection conn = DriverManager.getConnection(DB_URL);
             Statement stmt = conn.createStatement()) {
            stmt.execute("CREATE TABLE IF NOT EXISTS users (" +
                    "chat_id INTEGER PRIMARY KEY, " +
                    "number INTEGER UNIQUE, " +
                    "username TEXT, " +
                    "first_name TEXT, " +
                    "last_name TEXT, " +
                    "registered_at DATETIME DEFAULT CURRENT_TIMESTAMP)");
            System.out.println("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
        } catch (SQLException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: " + e.getMessage());
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
     */
    private void saveUser(Long chatId, Long number, User user) {
        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement ps = conn.prepareStatement(
                     "INSERT INTO users(chat_id, number, username, first_name, last_name) VALUES (?, ?, ?, ?, ?)")) {

            ps.setLong(1, chatId);
            ps.setLong(2, number);
            ps.setString(3, user.getUserName());
            ps.setString(4, user.getFirstName());
            ps.setString(5, user.getLastName());
            ps.executeUpdate();

        } catch (SQLException e) {
            if (e.getMessage().contains("UNIQUE")) {
                System.err.println("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: " + chatId + " ‚Üí " + number);
            } else {
                System.err.println("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + e.getMessage());
            }
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private boolean userExists(Long chatId) {
        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement ps = conn.prepareStatement("SELECT 1 FROM users WHERE chat_id=?")) {
            ps.setLong(1, chatId);
            ResultSet rs = ps.executeQuery();
            return rs.next();
        } catch (SQLException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + e.getMessage());
        }
        return false;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private String getUserNumber(Long chatId) {
        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement ps = conn.prepareStatement("SELECT number FROM users WHERE chat_id=?")) {
            ps.setLong(1, chatId);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) return rs.getString("number");
        } catch (SQLException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞: " + e.getMessage());
        }
        return null;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞
     */
    private boolean isNumberTaken(Long number) {
        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement ps = conn.prepareStatement("SELECT 1 FROM users WHERE number=?")) {
            ps.setLong(1, number);
            return ps.executeQuery().next();
        } catch (SQLException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–º–µ—Ä–∞: " + e.getMessage());
        }
        return false;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    private List<Long> getAllUsers() {
        List<Long> users = new ArrayList<>();
        try (Connection conn = DriverManager.getConnection(DB_URL);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT chat_id FROM users ORDER BY number")) {
            while (rs.next()) {
                users.add(rs.getLong("chat_id"));
            }
        } catch (SQLException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + e.getMessage());
        }
        return users;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
     */
    private int getRegisteredCount() {
        try (Connection conn = DriverManager.getConnection(DB_URL);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT COUNT(*) FROM users")) {
            if (rs.next()) return rs.getInt(1);
        } catch (SQLException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + e.getMessage());
        }
        return 0;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
     */
    private List<Long> getRegisteredNumbers() {
        List<Long> numbers = new ArrayList<>();
        try (Connection conn = DriverManager.getConnection(DB_URL);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT number FROM users ORDER BY number")) {
            while (rs.next()) {
                numbers.add(rs.getLong("number"));
            }
        } catch (SQLException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤: " + e.getMessage());
        }
        return numbers;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
     */
    private Long getUserNumberFromDB(Long chatId) {
        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement ps = conn.prepareStatement("SELECT number FROM users WHERE chat_id=?")) {
            ps.setLong(1, chatId);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) return rs.getLong("number");
        } catch (SQLException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∏–∑ –ë–î: " + e.getMessage());
        }
        return null;
    }

    /**
     * –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     */
    private String listUsers() {
        StringBuilder sb = new StringBuilder("üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:\n\n");
        try (Connection conn = DriverManager.getConnection(DB_URL);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM users ORDER BY number")) {

            int count = 0;
            while (rs.next()) {
                count++;
                String userLink = getUserLink(rs.getLong("chat_id"));
                sb.append("‚Ññ").append(rs.getInt("number"))
                        .append(" - ").append(userLink).append("\n");
            }
            sb.append("\n–í—Å–µ–≥–æ: ").append(count).append("/").append(MAX_USERS);

        } catch (SQLException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + e.getMessage());
        }
        return sb.toString().isEmpty() ? "üì≠ –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤" : sb.toString();
    }

    /**
     * –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å—Ç–∞—Ç—É—Å–æ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
     */
    private String listUsersWithVotes() {
        StringBuilder text = new StringBuilder("üë• –°—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n\n");
        List<Long> allUsers = getAllUsers();

        for (Long userId : allUsers) {
            String userLink = getUserLink(userId);
            Long number = getUserNumberFromDB(userId);
            Integer vote = currentQuestionResponses.get(userId);

            String status = vote != null ? "‚úÖ –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∞ (–∑–∞ ‚Ññ" + vote + ")" : "‚ùå –ù–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∞";
            text.append(userLink).append(" (‚Ññ").append(number).append(") - ").append(status).append("\n");
        }

        text.append("\nüó≥ –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏: ").append(currentQuestionResponses.size())
                .append("/").append(allUsers.size());

        return text.toString();
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private void deleteUser(Long chatId) {
        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement ps = conn.prepareStatement("DELETE FROM users WHERE chat_id=?")) {
            ps.setLong(1, chatId);
            ps.executeUpdate();
        } catch (SQLException e) {
            System.err.println("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + e.getMessage());
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private void updateUser(Long oldNumber, Long newNumber) {
        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement ps = conn.prepareStatement("UPDATE users SET number=? WHERE number=?")) {
            ps.setLong(1, newNumber);
            ps.setLong(2, oldNumber);
            ps.executeUpdate();
        } catch (SQLException e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞: " + e.getMessage());
        }
    }

    /**
     * –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    private void nukeDatabase() {
        try (Connection conn = DriverManager.getConnection(DB_URL);
             Statement stmt = conn.createStatement()) {
            stmt.execute("DELETE FROM users");
            System.out.println("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞");
        } catch (SQLException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ë–î: " + e.getMessage());
        }
    }
}
