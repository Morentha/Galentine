package org.example.bot;

import com.google.gson.Gson;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.io.*;
import java.util.HashMap;
import java.util.Map;
import java.sql.*;
//–°–æ —Å—Ç–æ—Ä–æ–Ω—ã —É—á–∞—Å—Ç–Ω–∏—Ü –Ω–∞–¥–æ: –≤ –Ω–∞—á–∞–ª–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ª–µ–∂–∏—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø–∞–ø–∫–µ (—á—Ç–æ–±—ã —è –º–æ–≥–ª–∞ –µ—ë –º–µ–Ω—è—Ç—å)
//–í–º–µ—Å—Ç–µ —Å –Ω–µ–π –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —É —É—á–∞—Å—Ç–Ω–∏—Ü –Ω–∞–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ
//–ö–æ–≥–¥–∞ —É—á–∞—Å—Ç–Ω–∏—Ü—ã –≤–≤–æ–¥—è—Ç –Ω–æ–º–µ—Ä, —Ç–æ –æ–Ω –∑–∞ –Ω–∏–º–∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ—Ç—Å—è, –∏–º –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ç–≤–æ–π –Ω–æ–º–µ—Ä —Ç–∞–∫–æ–π-—Ç–æ,
//–æ–∂–∏–¥–∞–π—Ç–µ, –≤–∞—à –∑–≤–æ–Ω–æ–∫ –æ—á–µ–Ω—å –≤–∞–∂–µ–Ω –¥–ª—è –Ω–∞—Å –∏ —Ç.–¥. –∏ —Ç.–ø.

public class MadBot extends TelegramLongPollingBot {

    private static final String DB_URL = "jdbc:sqlite:bot.db";
    private static final Long ADMIN_ID = 257023213L;
    private static final Integer MAX_USERS = 40;
    private Map<Long, String> userNumbers = new HashMap<>();
    private Gson gson = new Gson();
    private static final String DATA_FILE = "user_numbers.json";

    public MadBot() {
        initDatabase();
    }

    @Override
    public String getBotUsername() {
        return "Galentine bot";
    }

    @Override
    public String getBotToken() {
        return "8332201148:AAHQ5jvjWWrqcgP_kF1DFrVYyYt6nEwB11k";
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String text = update.getMessage().getText().trim();
            Long chatId = update.getMessage().getChatId();
            String username = update.getMessage().getFrom().getUserName();
            // üîπ –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞
            if (chatId.equals(ADMIN_ID)) {
                if (text.equals("/list")) {
                    sendMessage(chatId, listUsers());
                    return;
                }
                if (text.startsWith("/update")) {
                    String[] parts = text.split("\\s+");
                    if (parts.length == 3) {
                        try {
                            Long newNumber = Long.parseLong(parts[2]);
                            Long oldNumber = Long.parseLong(parts[1]);
                            updateUser(oldNumber, newNumber);
                            sendMessage(chatId, "‚úÖ –ù–æ–º–µ—Ä —É " + parts[1] + " –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ " + newNumber);
                        } catch (NumberFormatException e) {
                            sendMessage(chatId, "‚ùå –§–æ—Ä–º–∞—Ç: /update <chatId> <–Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä>");
                        }
                    } else {
                        sendMessage(chatId, "‚ùå –§–æ—Ä–º–∞—Ç: /update <chatId> <–Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä>");
                    }
                    return;
                }
                if (text.startsWith("/delete")) {
                    String[] parts = text.split("\\s+");
                    if (parts.length == 2) {
                        try {
                            Long memberNumber = Long.parseLong(parts[1]);
                            deleteUser(memberNumber);
                            sendMessage(chatId, "üóë –ù–æ–º–µ—Ä —É " + parts[1] + " —É–¥–∞–ª—ë–Ω.");
                        } catch (NumberFormatException e) {
                            sendMessage(chatId, "‚ùå –§–æ—Ä–º–∞—Ç: /delete <chatId>");
                        }
                    } else {
                        sendMessage(chatId, "‚ùå –§–æ—Ä–º–∞—Ç: /delete <chatId>");
                    }
                    return;
                }
            }
            // üîπ –ü–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏—Ü
            if (text.equals("/start")) {
                sendWelcome(chatId);
                return;
            }
            // üîπ –ü–æ–ø—ã—Ç–∫–∞ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä
            if (text.matches("\\d+")) {
                Long number = Long.parseLong(text);
                if (number < 1 || number > MAX_USERS) {
                    sendMessage(chatId, "‚ö†Ô∏è –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ " + MAX_USERS + ".");
                    return;
                }
                if (userExists(chatId)) {
                    String existingNumber = getUserNumber(chatId);
                    sendMessage(chatId, "–í–∞—à –Ω–æ–º–µ—Ä —É–∂–µ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω: " + existingNumber +
                            "\n–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∫–æ–π.");
                    return;
                }
                if (isNumberTaken(number)) {
                    sendMessage(chatId, "‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –∑–∞–Ω—è—Ç.");
                    return;
                }
                if (!text.matches("\\d+")) {
                    sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä");
                }
                saveUser(chatId, username, number);
                sendMessage(chatId, "‚úÖ –°–ø–∞—Å–∏–±–æ! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º " + number + ".");
                return;
            }
        }
    }

    private void saveData() {
        try (FileWriter writer = new FileWriter(DATA_FILE)) {
            gson.toJson(userNumbers, writer);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ + —Ç–µ–∫—Å—Ç–∞
    private void sendWelcome(Long chatId) {
        SendPhoto photo = new SendPhoto();
        photo.setChatId(chatId);
        photo.setPhoto(new InputFile(new File("src/main/resources/images/welcome.gif")));
        photo.setCaption("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å –≤–∞—à–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏:");

        try {
            execute(photo);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
    private void sendMessage(Long chatId, String text) {
        SendMessage message = new SendMessage(chatId.toString(), text);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    // --- –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ---
    private void initDatabase() {
        try (Connection conn = DriverManager.getConnection(DB_URL);
             Statement stmt = conn.createStatement()) {
            stmt.execute("CREATE TABLE IF NOT EXISTS users (chat_id INTEGER PRIMARY KEY, number TEXT)");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    // --- –ü—Ä–æ–≤–µ—Ä–∫–∞: —É—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω? ---
    private boolean userExists(Long chatId) {
        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement ps = conn.prepareStatement("SELECT 1 FROM users WHERE chat_id=?")) {
            ps.setLong(1, chatId);
            ResultSet rs = ps.executeQuery();
            return rs.next();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }
    // --- –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏—Ü—ã ---
    private String getUserNumber(Long chatId) {
        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement ps = conn.prepareStatement("SELECT number FROM users WHERE chat_id=?")) {
            ps.setLong(1, chatId);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) return rs.getString("number");
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }
    private void handleRegistration(Long userId, Long number, String username, Long chatId) {
        try (Connection conn = DriverManager.getConnection(DB_URL)) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —é–∑–µ—Ä
            PreparedStatement checkUser = conn.prepareStatement("SELECT number FROM users WHERE user_id = ?");
            checkUser.setLong(1, userId);
            ResultSet rs = checkUser.executeQuery();

            if (rs.next()) {
                // –£–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å
                Long existingNumber = rs.getLong("number");
                sendMessage(chatId, "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º " + existingNumber + ". –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –Ω–µ–ª—å–∑—è.");
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–Ω—è—Ç –ª–∏ –Ω–æ–º–µ—Ä
            if (isNumberTaken(number)) {
                sendMessage(chatId, "–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –∑–∞–Ω—è—Ç.");
                return;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            PreparedStatement insert = conn.prepareStatement(
                    "INSERT INTO users(user_id, number, username) VALUES (?, ?, ?)"
            );
            insert.setLong(1, userId);
            insert.setLong(2, number);
            insert.setString(3, username);
            insert.executeUpdate();

            sendMessage(chatId, "–°–ø–∞—Å–∏–±–æ! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º " + number + ".");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    // --- –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–æ–º–µ—Ä –∑–∞–Ω—è—Ç? ---
    private boolean isNumberTaken(Long number) {
        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement ps = conn.prepareStatement("SELECT 1 FROM users WHERE number=?")) {
            ps.setLong(1, number);
            return ps.executeQuery().next();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }
    // --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏—Ü—ã ---
    private void saveUser(Long chatId, String username, Long number) {
        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement ps = conn.prepareStatement("INSERT INTO users(chat_id, username, number) VALUES (?, ?, ?)")) {
            ps.setLong(1, chatId);
            ps.setString(2, username != null ? "@" + username : "–ë–µ–∑ –Ω–∏–∫–∞");
            ps.setLong(3, number);
            ps.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private String listUsers() {
        StringBuilder sb = new StringBuilder("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n");
        try (Connection conn = DriverManager.getConnection(DB_URL);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM users")) {
            while (rs.next()) {
                sb.append("ID: ").append(rs.getLong("chat_id"))
                        .append(" ‚Üí –Ω–æ–º–µ—Ä: ").append(rs.getString("number")).append("\n");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return sb.toString().isEmpty() ? "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç" : sb.toString();
    }

    private void deleteUser(Long chatId) {
        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement ps = conn.prepareStatement("DELETE FROM users WHERE chat_id=?")) {
            ps.setLong(1, chatId);
            ps.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void updateUser(Long chatId, Long newNumber) {
        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement ps = conn.prepareStatement("UPDATE users SET number=? WHERE chat_id=?")) {
            ps.setLong(1, newNumber);
            ps.setLong(2, chatId);
            ps.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }
}