package org.example.bot;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.io.*;
import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.Map;
import java.sql.*;
//–°–æ —Å—Ç–æ—Ä–æ–Ω—ã —É—á–∞—Å—Ç–Ω–∏—Ü –Ω–∞–¥–æ: –≤ –Ω–∞—á–∞–ª–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ª–µ–∂–∏—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø–∞–ø–∫–µ (—á—Ç–æ–±—ã —è –º–æ–≥–ª–∞ –µ—ë –º–µ–Ω—è—Ç—å)
//–í–º–µ—Å—Ç–µ —Å –Ω–µ–π –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —É —É—á–∞—Å—Ç–Ω–∏—Ü –Ω–∞–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ
//–ö–æ–≥–¥–∞ —É—á–∞—Å—Ç–Ω–∏—Ü—ã –≤–≤–æ–¥—è—Ç –Ω–æ–º–µ—Ä, —Ç–æ –æ–Ω –∑–∞ –Ω–∏–º–∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ—Ç—Å—è, –∏–º –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ç–≤–æ–π –Ω–æ–º–µ—Ä —Ç–∞–∫–æ–π-—Ç–æ,
//–æ–∂–∏–¥–∞–π—Ç–µ, –≤–∞—à –∑–≤–æ–Ω–æ–∫ –æ—á–µ–Ω—å –≤–∞–∂–µ–Ω –¥–ª—è –Ω–∞—Å –∏ —Ç.–¥. –∏ —Ç.–ø.

public class MadBot extends TelegramLongPollingBot {

    private static final String DATA_FILE = "user_numbers.json";

    // –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: chatId -> –Ω–æ–º–µ—Ä
    private Map<String, String> userNumbers = new HashMap<>();
    private Gson json = new Gson();
    private static final String DB_URL = "jdbc:sqlite:users.db";
    private static final String ADMIN_ID = "123456789L";

    public MadBot() {
        initDatabase();
    }

    @Override
    public String getBotUsername() {
        return "Galentine bot";
    }

    @Override
    public String getBotToken() {
        return "8332201148:AAHQ5jvjWWrqcgP_kF1DFrVYyYt6nEwB11k";
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String text = update.getMessage().getText().trim();
            String chatId = update.getMessage().getChatId().toString();
            // üîπ –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞
            if (chatId.equals(ADMIN_ID)) {
                if (text.equals("/list")) {
                    sendMessage(chatId, listUsers());
                    return;
                }
                if (text.startsWith("/update")) {
                    String[] parts = text.split("\\s+");
                    if (parts.length == 3) {
                        try {
                            long targetId = Long.parseLong(parts[1]);
                            String newNumber = parts[2];
                            updateUser(targetId, newNumber);
                            sendMessage(chatId, "‚úÖ –ù–æ–º–µ—Ä —É " + targetId + " –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ " + newNumber);
                        } catch (NumberFormatException e) {
                            sendMessage(chatId, "‚ùå –§–æ—Ä–º–∞—Ç: /update <chatId> <–Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä>");
                        }
                    } else {
                        sendMessage(chatId, "‚ùå –§–æ—Ä–º–∞—Ç: /update <chatId> <–Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä>");
                    }
                    return;
                }
                if (text.startsWith("/delete")) {
                    String[] parts = text.split("\\s+");
                    if (parts.length == 2) {
                        try {
                            long targetId = Long.parseLong(parts[1]);
                            deleteUser(targetId);
                            sendMessage(chatId, "üóë –ù–æ–º–µ—Ä —É " + targetId + " —É–¥–∞–ª—ë–Ω.");
                        } catch (NumberFormatException e) {
                            sendMessage(chatId, "‚ùå –§–æ—Ä–º–∞—Ç: /delete <chatId>");
                        }
                    } else {
                        sendMessage(chatId, "‚ùå –§–æ—Ä–º–∞—Ç: /delete <chatId>");
                    }
                    return;
                }
            }

            if (text.equals("/start")) {
                sendWelcome(chatId);
            } else if (text.matches("\\d+")) { // –µ—Å–ª–∏ –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä
                if (userNumbers.containsKey(chatId)) {
                    sendMessage(chatId, "–í–∞—à –Ω–æ–º–µ—Ä —É–∂–µ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω: " + userNumbers.get(chatId) +
                            "\n–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.");
                } else {
                    userNumbers.put(chatId, text);
                    saveData();
                    sendMessage(chatId, "–í–∞—à –Ω–æ–º–µ—Ä: " + text +
                            "\n–û–∂–∏–¥–∞–π—Ç–µ, –≤–∞—à –∑–≤–æ–Ω–æ–∫ –æ—á–µ–Ω—å –≤–∞–∂–µ–Ω –¥–ª—è –Ω–∞—Å ‚òéÔ∏è");
                }
            } else {
                sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä —Å –≤–∞—à–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).");
            }
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ + —Ç–µ–∫—Å—Ç–∞
    private void sendWelcome(String chatId) {
        SendPhoto photo = new SendPhoto();
        photo.setChatId(chatId.toString());
        photo.setPhoto(new InputFile(new File("src/main/resources/images/welcome.gif")));
        photo.setCaption("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å –≤–∞—à–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏:");

        try {
            execute(photo);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
    private void sendMessage(String chatId, String text) {
        SendMessage message = new SendMessage(chatId, text);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
    // --- –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ---
    private void initDatabase() {
        try (Connection conn = DriverManager.getConnection(DB_URL);
             Statement stmt = conn.createStatement()) {
            stmt.execute("CREATE TABLE IF NOT EXISTS users (chat_id INTEGER PRIMARY KEY, number TEXT)");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    private boolean userExists(Long chatId) {
        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement ps = conn.prepareStatement("SELECT 1 FROM users WHERE chat_id=?")) {
            ps.setLong(1, chatId);
            ResultSet rs = ps.executeQuery();
            return rs.next();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }
    private String getUserNumber(Long chatId) {
        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement ps = conn.prepareStatement("SELECT number FROM users WHERE chat_id=?")) {
            ps.setLong(1, chatId);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) return rs.getString("number");
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    private void saveUser(Long chatId, String number) {
        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement ps = conn.prepareStatement("INSERT INTO users(chat_id, number) VALUES (?, ?)")) {
            ps.setLong(1, chatId);
            ps.setString(2, number);
            ps.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    private String listUsers() {
        StringBuilder sb = new StringBuilder("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n");
        try (Connection conn = DriverManager.getConnection(DB_URL);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM users")) {
            while (rs.next()) {
                sb.append("ID: ").append(rs.getLong("chat_id"))
                        .append(" ‚Üí –Ω–æ–º–µ—Ä: ").append(rs.getString("number")).append("\n");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return sb.toString().isEmpty() ? "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç" : sb.toString();
    }
    private void deleteUser(Long chatId) {
        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement ps = conn.prepareStatement("DELETE FROM users WHERE chat_id=?")) {
            ps.setLong(1, chatId);
            ps.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    private void updateUser(Long chatId, String newNumber) {
        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement ps = conn.prepareStatement("UPDATE users SET number=? WHERE chat_id=?")) {
            ps.setString(1, newNumber);
            ps.setLong(2, chatId);
            ps.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }

}